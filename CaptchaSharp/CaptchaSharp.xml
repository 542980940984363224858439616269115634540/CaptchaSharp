<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CaptchaSharp</name>
    </assembly>
    <members>
        <member name="T:CaptchaSharp.CaptchaService">
            <summary>Abstract class for a generic captcha solving service.</summary>
        </member>
        <member name="P:CaptchaSharp.CaptchaService.Timeout">
            <summary>The maximum allowed time for captcha completion.
            If this <see cref="T:System.TimeSpan"/> is exceeded, a <see cref="T:System.TimeoutException"/> is thrown.</summary>
        </member>
        <member name="P:CaptchaSharp.CaptchaService.Capabilities">
            <summary>Returns a list of flags that denote the capabilities of the service in terms of additional 
            parameters to provide when solving text or image based captchas.</summary>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.GetBalanceAsync(System.Threading.CancellationToken)">
            <summary>Retrieves the remaining balance in USD as a <see cref="T:System.Double"/>.</summary>
            <exception cref="T:CaptchaSharp.Exceptions.BadAuthenticationException">Thrown when the provided credentials are invalid.</exception>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveTextCaptchaAsync(System.String,CaptchaSharp.Models.TextCaptchaOptions,System.Threading.CancellationToken)">
            <summary>Solves a text based captcha.</summary>
            
            <param name="text">The captcha question.</param>
            
            <param name="options">
            Any additional options like the language of the question.
            If null they will be disregarded.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <summary>Solves an image based captcha.</summary>
            
            <param name="base64">The captcha image encoded as a base64 string.</param>
            
            <param name="options">
            Any additional options like whether the captcha is case sensitive.
            If null they will be disregarded.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            /// <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <summary>Solves a Google ReCaptcha V2.</summary>
            
            <param name="siteKey">The site key, can be found in the webpage source or by sniffing requests.</param>
            <param name="siteUrl">The URL where the captcha appears.</param>
            <param name="invisible">Whether the captcha is not in a clickable format on the page.</param>
            
            <param name="proxy">
            A proxy that can be used by the captcha service to fetch the captcha challenge from the same IP you are 
            going to send it from when you submit the form. It can help bypass some blocks. If null, the service will 
            fetch the captcha without using a proxy.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveRecaptchaV3Async(System.String,System.String,System.String,System.Single,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <summary>Solves a Google ReCaptcha V3.</summary>
            
            <param name="siteKey">The site key, can be found in the webpage source or by sniffing requests.</param>
            <param name="siteUrl">The URL where the captcha appears.</param>
            <param name="action">The action to execute. Can be found in the webpage source or in a js file.</param>
            <param name="minScore">The minimum human-to-robot score necessary to solve the challenge.</param>
            
            <param name="proxy">
            A proxy that can be used by the captcha service to fetch the captcha challenge from the same IP you are 
            going to send it from when you submit the form. It can help bypass some blocks. If null, the service will 
            fetch the captcha without using a proxy.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveFuncaptchaAsync(System.String,System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <summary>Solves a Google ReCaptcha V3.</summary>
            
            <param name="publicKey">
            Can be found inside data-pkey parameter of funcaptcha's div element or inside an input element 
            with name <code>fc-token</code>. Just extract the key indicated after pk from the value of this element.
            </param>
            
            <param name="serviceUrl">
            Can be found in the <code>fc-token</code>, that is a value of the <code>surl</code> parameter.
            </param>
            
            <param name="siteUrl">The URL where the captcha appears.</param>
            
            <param name="noJS">
            Whether to solve the challenge without JavaScript enabled. This is not supported by every service and 
            it provides a partial token.
            </param>
            
            <param name="proxy">
            A proxy that can be used by the captcha service to fetch the captcha challenge from the same IP you are 
            going to send it from when you submit the form. It can help bypass some blocks. If null, the service will 
            fetch the captcha without using a proxy.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="M:CaptchaSharp.CaptchaService.SolveHCaptchaAsync(System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <summary>Solves a HCaptcha.</summary>
            
            <param name="siteKey">The site key, can be found in the webpage source or by sniffing requests.</param>
            <param name="siteUrl">The URL where the captcha appears.</param>
            
            <param name="proxy">
            A proxy that can be used by the captcha service to fetch the captcha challenge from the same IP you are 
            going to send it from when you submit the form. It can help bypass some blocks. If null, the service will 
            fetch the captcha without using a proxy.
            </param>
            
            <param name="cancellationToken">A token that can be used to cancel the async task.</param>
            
            <returns>
            A <see cref="T:CaptchaSharp.Models.StringResponse"/> containing the captcha id to be used with 
            <see cref="M:CaptchaSharp.CaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)"/> and the 
            captcha solution as plaintext.
            </returns>
        </member>
        <member name="T:CaptchaSharp.Enums.ProxyType">
            <summary></summary>
        </member>
        <member name="F:CaptchaSharp.Enums.ProxyType.HTTP">
            <summary></summary>
        </member>
        <member name="F:CaptchaSharp.Enums.ProxyType.HTTPS">
            <summary></summary>
        </member>
        <member name="F:CaptchaSharp.Enums.ProxyType.SOCKS4">
            <summary></summary>
        </member>
        <member name="F:CaptchaSharp.Enums.ProxyType.SOCKS5">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Exceptions.BadAuthenticationException">
            <summary>An exception that is thrown when the credentials are invalid.</summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.BadAuthenticationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.BadAuthenticationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.BadAuthenticationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Exceptions.TaskCreationException">
            <summary>An exception that is thrown when a captcha task could not be created on the remote server.</summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskCreationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskCreationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskCreationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Exceptions.TaskReportException">
            <summary>An exception that is thrown when a captcha failed to be reported as wrong.</summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskReportException.#ctor">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskReportException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskReportException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Exceptions.TaskSolutionException">
            <summary>An exception that is thrown when a captcha could not be solved.</summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskSolutionException.#ctor">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskSolutionException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Exceptions.TaskSolutionException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.HttpClientExtensions">
            <summary>Extensions for an <see cref="T:System.Net.Http.HttpClient"/>.</summary>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.GetAsync(System.Net.Http.HttpClient,System.String,CaptchaSharp.Models.StringPairCollection,System.Threading.CancellationToken)">
            <summary>Automatically builds a GET query string from a <see cref="T:CaptchaSharp.Models.StringPairCollection"/> 
            and appends it to the provided URL.</summary>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.GetStringAsync(System.Net.Http.HttpClient,System.String,CaptchaSharp.Models.StringPairCollection,System.Threading.CancellationToken)">
            <summary>Automatically builds a GET query string from a <see cref="T:CaptchaSharp.Models.StringPairCollection"/> 
            and appends it to the provided URL.</summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> content converted to a string.</returns>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.PostAsync(System.Net.Http.HttpClient,System.String,CaptchaSharp.Models.StringPairCollection,System.Threading.CancellationToken,System.String)">
            <summary>Automatically builds a POST query string from a <see cref="T:CaptchaSharp.Models.StringPairCollection"/> 
            using <see cref="P:System.Text.Encoding.UTF8"/> encoding and the provided Content-Type.</summary>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.PostToStringAsync(System.Net.Http.HttpClient,System.String,CaptchaSharp.Models.StringPairCollection,System.Threading.CancellationToken,System.String)">
            <summary>Automatically builds a POST query string from a <see cref="T:CaptchaSharp.Models.StringPairCollection"/> 
            using <see cref="P:System.Text.Encoding.UTF8"/> encoding and the provided Content-Type.</summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> content converted to a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.PostMultipartToStringAsync(System.Net.Http.HttpClient,System.String,System.Net.Http.MultipartFormDataContent,System.Threading.CancellationToken)">
            <summary>Sends a POST request with the desired <see cref="T:System.Net.Http.MultipartFormDataContent"/> and reads the 
            response as a <see cref="T:System.String"/>.</summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> content converted to a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CaptchaSharp.HttpClientExtensions.PostJsonToStringAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken,System.Boolean)">
            <summary>Automatically builds a POST json string from a given object using <see cref="P:System.Text.Encoding.UTF8"/> encoding 
            and application/json Content-Type.</summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> content converted to a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:CaptchaSharp.StringExtensions">
            <summary>Extensions for a <see cref="T:System.String"/>.</summary>
        </member>
        <member name="M:CaptchaSharp.StringExtensions.Deserialize``1(System.String)">
            <summary>Deserializes a json string to a given type.</summary>
        </member>
        <member name="M:CaptchaSharp.StringExtensions.SerializeCamelCase``1(``0)">
            <summary>Serializes an object to a json string and converts the property names 
            to a camelCase based convention.</summary>
        </member>
        <member name="M:CaptchaSharp.StringExtensions.SerializeLowerCase``1(``0)">
            <summary>Serializes an object to a json string and converts the property names 
            to a lowercase based convention.</summary>
        </member>
        <member name="T:CaptchaSharp.BoolExtensions">
            <summary>Extensions for a <see cref="T:System.Boolean"/>.</summary>
        </member>
        <member name="M:CaptchaSharp.BoolExtensions.ToInt(System.Boolean)">
            <summary>Converts a bool to an int.</summary>
            <returns>0 if false, 1 if true.</returns>
        </member>
        <member name="T:CaptchaSharp.CaptchaLanguageExtensions">
            <summary>Extensions for a <see cref="T:CaptchaSharp.Enums.CaptchaLanguage"/>.</summary>
        </member>
        <member name="M:CaptchaSharp.CaptchaLanguageExtensions.ToISO6391Code(CaptchaSharp.Enums.CaptchaLanguage)">
            <summary>Converts a <see cref="T:CaptchaSharp.Enums.CaptchaLanguage"/> to an ISO-639-1 country code.</summary>
        </member>
        <member name="T:CaptchaSharp.Models.CaptchaResponse">
            <summary>A generic captcha response.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.CaptchaResponse.Id">
            <summary>The captcha id which is needed to report the solution as bad.</summary>
        </member>
        <member name="T:CaptchaSharp.Models.GeeTestResponse">
            <summary>The solution of a GeeTest captcha.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.GeeTestResponse.Challenge">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.GeeTestResponse.Validate">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.GeeTestResponse.SecCode">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Models.ImageCaptchaOptions">
            <summary>Provides additional options for an image based captcha task.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.IsPhrase">
            <summary>Whether the captcha is made of multiple words.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.CaseSensitive">
            <summary>Whether the captcha should be solved as case sensitive.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.CharacterSet">
            <summary>The set of allowed characters.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.RequiresCalculation">
            <summary>Whether the captcha includes mathematical calculations.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.MinLength">
            <summary>The minimum possible length of the text.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.MaxLength">
            <summary>The maximum possible length of the text.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.CaptchaLanguageGroup">
            <summary>The language group of the text.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.CaptchaLanguage">
            <summary>The language of the text.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.ImageCaptchaOptions.TextInstructions">
            <summary>Any additional text instruction (e.g. type the characters in red).</summary>
        </member>
        <member name="T:CaptchaSharp.Models.Proxy">
            <summary>A generic proxy class.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Host">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Port">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Type">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Username">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Password">
            <summary></summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.UserAgent">
            <summary>The User-Agent header to be used in requests.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.Cookies">
            <summary>The cookies needed to get to the page where the captcha is shown.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.Proxy.RequiresAuthentication">
            <summary>Whether the proxy requires authentication.</summary>
        </member>
        <member name="M:CaptchaSharp.Models.Proxy.#ctor">
            <summary></summary>
        </member>
        <member name="M:CaptchaSharp.Models.Proxy.#ctor(System.String,System.Int32,CaptchaSharp.Enums.ProxyType,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:CaptchaSharp.Models.StringPairCollection">
            <summary>A collection of string pairs.</summary>
        </member>
        <member name="M:CaptchaSharp.Models.StringPairCollection.Add(System.String,System.String,System.Boolean)">
            <summary>Adds a new pair to the collection if <paramref name="addCondition"/> is true.</summary>
        </member>
        <member name="M:CaptchaSharp.Models.StringPairCollection.Add``2(``0,``1,System.Boolean)">
            <summary>Adds a new pair to the collection if <paramref name="addCondition"/> is true by 
            calling the ToString() method on <paramref name="first"/> and <paramref name="second"/>.</summary>
        </member>
        <member name="M:CaptchaSharp.Models.StringPairCollection.Add(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>Adds multiple new pairs to the collection.</summary>
        </member>
        <member name="M:CaptchaSharp.Models.StringPairCollection.ToHttpQueryString">
            <summary>Outputs a string like <c>name1=value1&amp;name2=value2</c></summary>
        </member>
        <member name="M:CaptchaSharp.Models.StringPairCollection.ToMultipartFormDataContent">
            <summary>Outputs a new <see cref="T:System.Net.Http.MultipartFormDataContent"/> where each pair 
            of the collection becomes a <see cref="T:System.Net.Http.StringContent"/>.</summary>
        </member>
        <member name="T:CaptchaSharp.Models.StringResponse">
            <summary>A captcha response with a string solution.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.StringResponse.Response">
            <summary>The plaintext response string.</summary>
        </member>
        <member name="T:CaptchaSharp.Models.TextCaptchaOptions">
            <summary>Provides additional options for a text based captcha task.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.TextCaptchaOptions.CaptchaLanguageGroup">
            <summary>The language group of the text.</summary>
        </member>
        <member name="P:CaptchaSharp.Models.TextCaptchaOptions.CaptchaLanguage">
            <summary>The language of the text.</summary>
        </member>
        <member name="T:CaptchaSharp.Services.AntiCaptchaService">
            <summary>The service provided by <c>https://anti-captcha.com/</c></summary>
        </member>
        <member name="P:CaptchaSharp.Services.AntiCaptchaService.ApiKey">
            <summary>Your secret api key.</summary>
        </member>
        <member name="F:CaptchaSharp.Services.AntiCaptchaService.httpClient">
            <summary>The default <see cref="T:System.Net.Http.HttpClient"/> used for requests.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.AntiCaptchaService.SoftId">
            <summary>The ID of the software developer.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.#ctor(System.String,System.Net.Http.HttpClient)">
            <summary>Initializes a <see cref="T:CaptchaSharp.Services.AntiCaptchaService"/> using the given <paramref name="apiKey"/> 
            <paramref name="httpClient"/>. If <paramref name="httpClient"/> is null, a default one will be created.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.GetBalanceAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveRecaptchaV3Async(System.String,System.String,System.String,System.Single,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveFuncaptchaAsync(System.String,System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveHCaptchaAsync(System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.SolveGeeTestAsync(System.String,System.String,System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.AntiCaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:CaptchaSharp.Services.AntiCaptchaService.Capabilities">
            <inheritdoc/>
        </member>
        <member name="T:CaptchaSharp.Services.DeathByCaptchaService">
            <summary>The service provided by <c>https://www.deathbycaptcha.com/</c></summary>
        </member>
        <member name="P:CaptchaSharp.Services.DeathByCaptchaService.Username">
            <summary>Your DeathByCaptcha account name.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.DeathByCaptchaService.Password">
            <summary>Your DeathByCaptcha account password.</summary>
        </member>
        <member name="F:CaptchaSharp.Services.DeathByCaptchaService.httpClient">
            <summary>The default <see cref="T:System.Net.Http.HttpClient"/> used for requests.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.#ctor(System.String,System.String,System.Net.Http.HttpClient)">
            <summary>Initializes a <see cref="T:CaptchaSharp.Services.DeathByCaptchaService"/> using the given account credentials and 
            <paramref name="httpClient"/>. If <paramref name="httpClient"/> is null, a default one will be created.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.GetBalanceAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.SolveRecaptchaV3Async(System.String,System.String,System.String,System.Single,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.SolveFuncaptchaAsync(System.String,System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeathByCaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:CaptchaSharp.Services.DeCaptcherService">
            <summary>The service provided by <c>https://de-captcher.com/</c></summary>
        </member>
        <member name="P:CaptchaSharp.Services.DeCaptcherService.Username">
            <summary>Your DeCaptcher account name.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.DeCaptcherService.Password">
            <summary>Your DeCaptcher account password.</summary>
        </member>
        <member name="F:CaptchaSharp.Services.DeCaptcherService.httpClient">
            <summary>The default <see cref="T:System.Net.Http.HttpClient"/> used for requests.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.#ctor(System.String,System.String,System.Net.Http.HttpClient)">
            <summary>Initializes a <see cref="T:CaptchaSharp.Services.DeCaptcherService"/> using the given account credentials and 
            <paramref name="httpClient"/>. If <paramref name="httpClient"/> is null, a default one will be created.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.GetBalanceAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.SolveTextCaptchaAsync(System.String,CaptchaSharp.Models.TextCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.DeCaptcherService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:CaptchaSharp.Services.ImageTyperzService">
            <summary>The service provided by <c>https://www.imagetyperz.com/</c></summary>
        </member>
        <member name="P:CaptchaSharp.Services.ImageTyperzService.ApiKey">
            <summary>Your secret api key.</summary>
        </member>
        <member name="F:CaptchaSharp.Services.ImageTyperzService.httpClient">
            <summary>The default <see cref="T:System.Net.Http.HttpClient"/> used for requests.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.ImageTyperzService.AffiliateId">
            <summary>The ID of the software developer.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.#ctor(System.String,System.Net.Http.HttpClient)">
            <summary>Initializes a <see cref="T:CaptchaSharp.Services.ImageTyperzService"/> using the given <paramref name="apiKey"/> 
            <paramref name="httpClient"/>. If <paramref name="httpClient"/> is null, a default one will be created.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.GetBalanceAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveRecaptchaV3Async(System.String,System.String,System.String,System.Single,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveHCaptchaAsync(System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveGeeTestAsync(System.String,System.String,System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.SolveCapyAsync(System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.ImageTyperzService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:CaptchaSharp.Services.ImageTyperzService.Capabilities">
            <inheritdoc/>
        </member>
        <member name="T:CaptchaSharp.Services.TwoCaptchaService">
            <summary>The service provided by <c>https://2captcha.com/</c></summary>
        </member>
        <member name="P:CaptchaSharp.Services.TwoCaptchaService.ApiKey">
            <summary>Your secret api key.</summary>
        </member>
        <member name="F:CaptchaSharp.Services.TwoCaptchaService.httpClient">
            <summary>The default <see cref="T:System.Net.Http.HttpClient"/> used for requests.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.TwoCaptchaService.UseJsonFlag">
            <summary>Set it to false if the service does not support json responses.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.TwoCaptchaService.AddACAOHeader">
            <summary>Will include an Access-Control-Allow-Origin:* header in the response for 
            cross-domain AJAX requests in web applications.</summary>
        </member>
        <member name="P:CaptchaSharp.Services.TwoCaptchaService.SoftId">
            <summary>The ID of the software developer.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.#ctor(System.String,System.Net.Http.HttpClient)">
            <summary>Initializes a <see cref="T:CaptchaSharp.Services.TwoCaptchaService"/> using the given <paramref name="apiKey"/> 
            <paramref name="httpClient"/>. If <paramref name="httpClient"/> is null, a default one will be created.</summary>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.GetBalanceAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveTextCaptchaAsync(System.String,CaptchaSharp.Models.TextCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveImageCaptchaAsync(System.String,CaptchaSharp.Models.ImageCaptchaOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveRecaptchaV2Async(System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveRecaptchaV3Async(System.String,System.String,System.String,System.Single,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveFuncaptchaAsync(System.String,System.String,System.String,System.Boolean,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveHCaptchaAsync(System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveKeyCaptchaAsync(System.String,System.String,System.String,System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.SolveGeeTestAsync(System.String,System.String,System.String,System.String,CaptchaSharp.Models.Proxy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.TryGetResult(CaptchaSharp.Services.TwoCaptcha.Response,CaptchaSharp.Enums.CaptchaType,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CaptchaSharp.Services.TwoCaptchaService.ReportSolution(System.Int64,CaptchaSharp.Enums.CaptchaType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:CaptchaSharp.Services.TwoCaptchaService.Capabilities">
            <inheritdoc/>
        </member>
    </members>
</doc>
